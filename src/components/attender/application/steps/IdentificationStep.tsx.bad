/**
 * 身分証明・追加情報入力ステップ
 * 
 * アテンダー申請フォームの身分証明書と追加情報を入力するステップ
 */
import React, { useState } from 'react';
import { useAttenderApplication } from '../../../../contexts/AttenderApplicationContext';
import { AdditionalDocument, Reference, SocialMediaLinks } from '../../../../types/attender';

interface IdentificationStepProps {
  onNext: () => void;
  onBack: () => void;
}

// 拡張された推薦者型（フォーム入力用）
interface ReferenceForm {
  name: string;
  relationship: string;
  email: string;
  phoneNumber?: string;
  contactInfo?: string;
  yearsKnown?: number;
  message?: string;
  verified?: boolean;
}

const IdentificationStep: React.FC<IdentificationStepProps> = ({ onNext, onBack }) => {
  const { 
    formData, 
    updateFormData, 
    errors, 
    clearError,
    addReference,
    updateReference,
    removeReference,
    addDocument,
    removeDocument,
    updateSocialMediaLinks
  } = useAttenderApplication();
  
  // ファイルアップロード用の状態
  const [frontImageFile, setFrontImageFile] = useState<File | null>(null);
  const [backImageFile, setBackImageFile] = useState<File | null>(null);
  const [additionalDocFile, setAdditionalDocFile] = useState<File | null>(null);
  
  // 新しい推薦者情報
  const [newReference, setNewReference] = useState<ReferenceForm>({
    name: '',
    relationship: '',
    email: '',
    contactInfo: '',
    yearsKnown: 0
  });
  
  // 新しい追加書類情報
  const [newDocument, setNewDocument] = useState<Omit<AdditionalDocument, 'fileUrl' | 'uploadDate'>>({
    type: '' as 'certification' | 'license' | 'insurance' | 'reference_letter' | 'other',
    title: '',
    description: ''
  });
  
  // 身分証明書情報の更新
  const handleIdDocChange = (e: React.ChangeEvent<HTMLSelectElement | HTMLInputElement>) => {
    const { name, value } = e.target;
    const fieldName = name.split('.')[1] as 'type' | 'number' | 'expirationDate' | 'frontImageUrl' | 'backImageUrl';
    
    // 現在のidentificationDocument情報を取得または初期化
    const currentIdDoc = formData.identificationDocument || {
      type: '' as 'passport' | 'driver_license' | 'id_card' | 'residence_card' | 'other',
      number: '',
      expirationDate: '',
      frontImageUrl: ''
    };
    
    updateFormData({
      identificationDocument: {
        ...currentIdDoc,
        [fieldName]: value
      }
    });
    
    clearError(name);
  };
  
  // 身分証明書画像のアップロード処理
  const handleImageUpload = (e: React.ChangeEvent<HTMLInputElement>, isFront: boolean) => {
    const file = e.target.files?.[0];
    if (!file) return;
    
    // 実際の実装ではクラウドストレージへのアップロード処理を行い、URLを取得する
    // ここではモック実装としてファイル名をURLとして扱う
    const mockUrl = `https://storage.example.com/ids/${Date.now()}-${file.name}`;
    
    // 現在のidentificationDocument情報を取得または初期化
    const currentIdDoc = formData.identificationDocument || {
      type: '' as 'passport' | 'driver_license' | 'id_card' | 'residence_card' | 'other',
      number: '',
      expirationDate: '',
      frontImageUrl: ''
    };
    
    if (isFront) {
      setFrontImageFile(file);
      updateFormData({
        identificationDocument: {
          ...currentIdDoc,
          frontImageUrl: mockUrl
        }
      });
      clearError('identificationDocument.frontImageUrl');
    } else {
      setBackImageFile(file);
      updateFormData({
        identificationDocument: {
          ...currentIdDoc,
          backImageUrl: mockUrl
        }
      });
    }
  };
  
  // SNSリンクの更新
  const handleSocialMediaChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    const { name, value } = e.target;
    updateSocialMediaLinks({ [name]: value });
  };
  
  // 推薦者情報の入力変更
  const handleReferenceChange = (e: React.ChangeEvent<HTMLInputElement | HTMLSelectElement>) => {
    const { name, value } = e.target;
    setNewReference({
      ...newReference,
      [name]: name === 'yearsKnown' ? parseFloat(value) : value
    });
  };
  
  // 推薦者の追加
  const handleAddReference = () => {
    if (newReference.name && newReference.relationship && (newReference.contactInfo || newReference.email)) {
      // contactInfo から email または phoneNumber を設定
      const reference: Reference = {
        name: newReference.name,
        relationship: newReference.relationship,
        email: newReference.email || newReference.contactInfo || '',
        phoneNumber: newReference.phoneNumber,
        yearsKnown: newReference.yearsKnown,
        message: newReference.message,
        verified: newReference.verified
      };
      
      addReference(reference);
      setNewReference({
        name: '',
        relationship: '',
        email: '',
        contactInfo: '',
        yearsKnown: 0
      });
    }
  };
  
  // 追加書類の入力変更
  const handleDocumentChange = (e: React.ChangeEvent<HTMLInputElement | HTMLSelectElement | HTMLTextAreaElement>) => {
    const { name, value } = e.target;
    setNewDocument({
      ...newDocument,
      [name]: value
    });
  };
  
  // 追加書類のアップロード処理
  const handleDocumentUpload = (e: React.ChangeEvent<HTMLInputElement>) => {
    const file = e.target.files?.[0];
    if (!file) return;
    
    setAdditionalDocFile(file);
  };
  
  // 追加書類の追加
  const handleAddDocument = () => {
    if (newDocument.type && newDocument.title && additionalDocFile) {
      // 実際の実装ではクラウドストレージへのアップロード処理を行い、URLを取得する
      // ここではモック実装としてファイル名をURLとして扱う
      const mockUrl = `https://storage.example.com/docs/${Date.now()}-${additionalDocFile.name}`;
      
      addDocument({
        ...newDocument,
        fileUrl: mockUrl,
        uploadDate: new Date().toISOString()
      } as AdditionalDocument);
      
      setNewDocument({
        type: '' as 'certification' | 'license' | 'insurance' | 'reference_letter' | 'other',
        title: '',
        description: ''
      });
      setAdditionalDocFile(null);
    }
  };
  
  return (
    <div className="space-y-8">
      <h2 className="text-xl font-semibold mb-4">身分証明と追加情報</h2>

      {/* 身分証明書セクション */}
      <div className="bg-white p-6 rounded-lg border border-gray-200 shadow-sm">
        <h3 className="text-lg font-medium mb-4">身分証明書</h3>
        <p className="text-sm text-gray-500 mb-4">
          アテンダーとして活動するには、身分証明書の提出が必要です。提出された情報は厳重に管理され、確認後に当社のデータベースに安全に保存されます。
        </p>
        
        <div className="space-y-4">
          {/* 身分証明書タイプ */}
          <div>
            <label htmlFor="identificationDocument.type" className="block text-sm font-medium text-gray-700 mb-1">
              身分証明書の種類 <span className="text-red-500">*</span>
            </label>
            <select
              id="identificationDocument.type"
              name="identificationDocument.type"
              value={formData.identificationDocument?.type || ''}
              onChange={handleIdDocChange}
              className={`w-full px-3 py-2 border rounded-md shadow-sm focus:outline-none focus:ring-blue-500 focus:border-blue-500 ${
                errors['identificationDocument.type'] ? 'border-red-500' : 'border-gray-300'
              }`}
            >
              <option value="">選択してください</option>
              <option value="passport">パスポート</option>
              <option value="driver_license">運転免許証</option>
              <option value="id_card">マイナンバーカード</option>
              <option value="residence_card">在留カード（外国籍の方）</option>
              <option value="other">その他</option>
            </select>
            {errors['identificationDocument.type'] && (
              <p className="mt-1 text-sm text-red-500">{errors['identificationDocument.type']}</p>
            )}
          </div>
      
      {/* 推薦者 */}
      <div className="bg-white p-6 rounded-lg border border-gray-200 shadow-sm">
        <h3 className="text-lg font-medium mb-4">推薦者（任意）</h3>
        <p className="text-sm text-gray-500 mb-4">
          あなたの人柄や能力を証明できる方を推薦者として追加することができます。推薦者は審査の参考にされます。
        </p>
        
        {/* 登録済み推薦者のリスト */}
        {formData.references && formData.references.length > 0 && (
          <div className="mb-6">
            <h4 className="text-md font-medium mb-2">登録済み推薦者</h4>
            <ul className="divide-y divide-gray-200">
              {formData.references.map((reference, index) => (
                <li key={index} className="py-3 flex justify-between items-center">
                  <div>
                    <p className="font-medium">{reference.name}</p>
                    <p className="text-sm text-gray-500">{reference.relationship}</p>
                    <p className="text-xs text-gray-400">知り合って{reference.yearsKnown}年</p>
                  </div>
                  <button
                    type="button"
                    onClick={() => removeReference(index)}
                    className="text-red-500 hover:text-red-700"
                  >
                    削除
                  </button>
                </li>
              ))}
            </ul>
          </div>
        )}
        
        {/* 新しい推薦者の追加フォーム */}
        <div className="space-y-4 border-t pt-4">
          <h4 className="text-md font-medium">新しい推薦者を追加</h4>
          
          {/* 推薦者名 */}
          <div>
            <label htmlFor="referenceName" className="block text-sm font-medium text-gray-700 mb-1">
              推薦者名
            </label>
            <input
              type="text"
              id="referenceName"
              name="name"
              value={newReference.name}
              onChange={handleReferenceChange}
              className="w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-blue-500 focus:border-blue-500"
              placeholder="例：山田 花子"
            />
          </div>
          
          {/* 関係性 */}
          <div>
            <label htmlFor="relationship" className="block text-sm font-medium text-gray-700 mb-1">
              関係性
            </label>
            <input
              type="text"
              id="relationship"
              name="relationship"
              value={newReference.relationship}
              onChange={handleReferenceChange}
              className="w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-blue-500 focus:border-blue-500"
              placeholder="例：前職の上司、地元の商店会会長など"
            />
          </div>
          
          {/* メールアドレス */}
          <div>
            <label htmlFor="email" className="block text-sm font-medium text-gray-700 mb-1">
              メールアドレス
            </label>
            <input
              type="email"
              id="email"
              name="email"
              value={newReference.email}
              onChange={handleReferenceChange}
              className="w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-blue-500 focus:border-blue-500"
              placeholder="例：email@example.com"
            />
          </div>
          
          {/* 連絡先 */}
          <div>
            <label htmlFor="contactInfo" className="block text-sm font-medium text-gray-700 mb-1">
              その他の連絡先（任意）
            </label>
            <input
              type="text"
              id="contactInfo"
              name="contactInfo"
              value={newReference.contactInfo || ''}
              onChange={handleReferenceChange}
              className="w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-blue-500 focus:border-blue-500"
              placeholder="例：090-1234-5678"
            />
          </div>
          
          {/* 知り合いの年数 */}
          <div>
            <label htmlFor="yearsKnown" className="block text-sm font-medium text-gray-700 mb-1">
              知り合いの年数
            </label>
            <input
              type="number"
              id="yearsKnown"
              name="yearsKnown"
              min="0"
              step="0.5"
              value={newReference.yearsKnown || 0}
              onChange={handleReferenceChange}
              className="w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-blue-500 focus:border-blue-500"
              placeholder="例：3.5"
            />
          </div>
          
          {/* 追加ボタン */}
          <div>
            <button
              type="button"
              onClick={handleAddReference}
              disabled={!newReference.name || !newReference.relationship || !newReference.email}
              className={`px-4 py-2 rounded-md ${
                !newReference.name || !newReference.relationship || !newReference.email
                  ? 'bg-gray-300 cursor-not-allowed'
                  : 'bg-blue-500 text-white hover:bg-blue-600'
              }`}
            >
              推薦者を追加
            </button>
          </div>
        </div>
      </div>
      
      {/* 追加書類 */}
      <div className="bg-white p-6 rounded-lg border border-gray-200 shadow-sm">
        <h3 className="text-lg font-medium mb-4">追加書類（任意）</h3>
        <p className="text-sm text-gray-500 mb-4">
          資格証明書、賞状、認定証など、あなたの専門知識や経験を証明する書類がある場合は追加してください。
        </p>
        
        {/* 登録済み追加書類のリスト */}
        {formData.additionalDocuments && formData.additionalDocuments.length > 0 && (
          <div className="mb-6">
            <h4 className="text-md font-medium mb-2">登録済み書類</h4>
            <ul className="divide-y divide-gray-200">
              {formData.additionalDocuments.map((document, index) => (
                <li key={index} className="py-3 flex justify-between items-center">
                  <div>
                    <p className="font-medium">{document.title}</p>
                    <p className="text-sm text-gray-500">{document.type}</p>
                    <p className="text-xs text-gray-400">アップロード日: {new Date(document.uploadDate || '').toLocaleDateString()}</p>
                  </div>
                  <button
                    type="button"
                    onClick={() => removeDocument(index)}
                    className="text-red-500 hover:text-red-700"
                  >
                    削除
                  </button>
                </li>
              ))}
            </ul>
          </div>
        )}
        
        {/* 新しい追加書類の追加フォーム */}
        <div className="space-y-4 border-t pt-4">
          <h4 className="text-md font-medium">新しい書類を追加</h4>
          
          {/* 書類タイプ */}
          <div>
            <label htmlFor="documentType" className="block text-sm font-medium text-gray-700 mb-1">
              書類タイプ
            </label>
            <select
              id="documentType"
              name="type"
              value={newDocument.type}
              onChange={handleDocumentChange}
              className="w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-blue-500 focus:border-blue-500"
            >
              <option value="">選択してください</option>
              <option value="certification">資格証明書</option>
              <option value="license">免許証</option>
              <option value="insurance">保険証</option>
              <option value="reference_letter">推薦状</option>
              <option value="other">その他</option>
            </select>
          </div>
          
          {/* 書類名 */}
          <div>
            <label htmlFor="documentTitle" className="block text-sm font-medium text-gray-700 mb-1">
              書類名
            </label>
            <input
              type="text"
              id="documentTitle"
              name="title"
              value={newDocument.title}
              onChange={handleDocumentChange}
              className="w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-blue-500 focus:border-blue-500"
              placeholder="例：調理師免許、英語能力検定証明書など"
            />
          </div>
          
          {/* 説明 */}
          <div>
            <label htmlFor="documentDescription" className="block text-sm font-medium text-gray-700 mb-1">
              説明（任意）
            </label>
            <textarea
              id="documentDescription"
              name="description"
              value={newDocument.description || ''}
              onChange={handleDocumentChange}
              className="w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-blue-500 focus:border-blue-500"
              placeholder="書類に関する補足説明"
              rows={3}
            />
          </div>
          
          {/* ファイルアップロード */}
          <div>
            <label htmlFor="documentFile" className="block text-sm font-medium text-gray-700 mb-1">
              ファイル
            </label>
            <div className="mt-1 flex items-center">
              <input
                type="file"
                id="documentFile"
                name="documentFile"
                onChange={handleDocumentUpload}
                className="sr-only"
              />
              <label
                htmlFor="documentFile"
                className="relative cursor-pointer bg-white border border-gray-300 rounded-md py-2 px-3 flex items-center justify-center text-sm font-medium text-gray-700 hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500"
              >
                <span>ファイルを選択</span>
              </label>
              <span className="ml-2 text-sm text-gray-500">
                {additionalDocFile ? additionalDocFile.name : '選択されていません'}
              </span>
            </div>
          </div>
          
          {/* 追加ボタン */}
          <div>
            <button
              type="button"
              onClick={handleAddDocument}
              disabled={!newDocument.type || !newDocument.title || !additionalDocFile}
              className={`px-4 py-2 rounded-md ${
                !newDocument.type || !newDocument.title || !additionalDocFile
                  ? 'bg-gray-300 cursor-not-allowed'
                  : 'bg-blue-500 text-white hover:bg-blue-600'
              }`}
            >
              書類を追加
            </button>
          </div>
        </div>
      </div>
      
      {/* ナビゲーションボタン */}
      <div className="flex justify-between mt-8">
        <button
          type="button"
          onClick={onBack}
          className="px-4 py-2 border border-gray-300 rounded-md text-sm font-medium text-gray-700 hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500"
        >
          戻る
        </button>
        <button
          type="button"
          onClick={onNext}
          className="px-4 py-2 bg-blue-500 text-white rounded-md text-sm font-medium hover:bg-blue-600 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500"
        >
          次へ
        </button>
      </div>
    </div>
  );
};

export default IdentificationStep;
          
          {/* 身分証明書番号 */}
          <div>
            <label htmlFor="identificationDocument.number" className="block text-sm font-medium text-gray-700 mb-1">
              身分証明書番号 <span className="text-red-500">*</span>
            </label>
            <input
              type="text"
              id="identificationDocument.number"
              name="identificationDocument.number"
              value={formData.identificationDocument?.number || ''}
              onChange={handleIdDocChange}
              className={`w-full px-3 py-2 border rounded-md shadow-sm focus:outline-none focus:ring-blue-500 focus:border-blue-500 ${
                errors['identificationDocument.number'] ? 'border-red-500' : 'border-gray-300'
              }`}
              placeholder="身分証明書に記載されている番号"
            />
            {errors['identificationDocument.number'] && (
              <p className="mt-1 text-sm text-red-500">{errors['identificationDocument.number']}</p>
            )}
          </div>
          
          {/* 有効期限 */}
          <div>
            <label htmlFor="identificationDocument.expirationDate" className="block text-sm font-medium text-gray-700 mb-1">
              有効期限 <span className="text-red-500">*</span>
            </label>
            <input
              type="date"
              id="identificationDocument.expirationDate"
              name="identificationDocument.expirationDate"
              value={formData.identificationDocument?.expirationDate || ''}
              onChange={handleIdDocChange}
              className={`w-full px-3 py-2 border rounded-md shadow-sm focus:outline-none focus:ring-blue-500 focus:border-blue-500 ${
                errors['identificationDocument.expirationDate'] ? 'border-red-500' : 'border-gray-300'
              }`}
            />
            {errors['identificationDocument.expirationDate'] && (
              <p className="mt-1 text-sm text-red-500">{errors['identificationDocument.expirationDate']}</p>
            )}
          </div>
          
          {/* 身分証明書の表面画像 */}
          <div>
            <label htmlFor="frontImage" className="block text-sm font-medium text-gray-700 mb-1">
              身分証明書の表面画像 <span className="text-red-500">*</span>
            </label>
            <div className="mt-1 flex items-center">
              <input
                type="file"
                id="frontImage"
                name="frontImage"
                accept="image/*"
                onChange={(e) => handleImageUpload(e, true)}
                className="sr-only"
              />
              <label
                htmlFor="frontImage"
                className="relative cursor-pointer bg-white border border-gray-300 rounded-md py-2 px-3 flex items-center justify-center text-sm font-medium text-gray-700 hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500"
              >
                <span>ファイルを選択</span>
              </label>
              <span className="ml-2 text-sm text-gray-500">
                {frontImageFile ? frontImageFile.name : '選択されていません'}
              </span>
            </div>
            {errors['identificationDocument.frontImageUrl'] && (
              <p className="mt-1 text-sm text-red-500">{errors['identificationDocument.frontImageUrl']}</p>
            )}
          </div>
          
          {/* 身分証明書の裏面画像（任意） */}
          <div>
            <label htmlFor="backImage" className="block text-sm font-medium text-gray-700 mb-1">
              身分証明書の裏面画像（任意）
            </label>
            <div className="mt-1 flex items-center">
              <input
                type="file"
                id="backImage"
                name="backImage"
                accept="image/*"
                onChange={(e) => handleImageUpload(e, false)}
                className="sr-only"
              />
              <label
                htmlFor="backImage"
                className="relative cursor-pointer bg-white border border-gray-300 rounded-md py-2 px-3 flex items-center justify-center text-sm font-medium text-gray-700 hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500"
              >
                <span>ファイルを選択</span>
              </label>
              <span className="ml-2 text-sm text-gray-500">
                {backImageFile ? backImageFile.name : '選択されていません'}
              </span>
            </div>
          </div>
        </div>
      </div>
      
      {/* SNSリンク */}
      <div className="bg-white p-6 rounded-lg border border-gray-200 shadow-sm">
        <h3 className="text-lg font-medium mb-4">SNSリンク（任意）</h3>
        <p className="text-sm text-gray-500 mb-4">
          あなたのSNSアカウントやウェブサイトを共有することで、ゲストにあなたの活動や提供する体験についてより詳しく知ってもらうことができます。
        </p>
        
        <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
          {/* Instagram */}
          <div>
            <label htmlFor="instagram" className="block text-sm font-medium text-gray-700 mb-1">
              Instagram
            </label>
            <input
              type="text"
              id="instagram"
              name="instagram"
              value={formData.socialMediaLinks?.instagram || ''}
              onChange={handleSocialMediaChange}
              className="w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-blue-500 focus:border-blue-500"
              placeholder="https://instagram.com/username"
            />
          </div>
          
          {/* Twitter */}
          <div>
            <label htmlFor="twitter" className="block text-sm font-medium text-gray-700 mb-1">
              Twitter
            </label>
            <input
              type="text"
              id="twitter"
              name="twitter"
              value={formData.socialMediaLinks?.twitter || ''}
              onChange={handleSocialMediaChange}
              className="w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-blue-500 focus:border-blue-500"
              placeholder="https://twitter.com/username"
            />
          </div>
          
          {/* YouTube */}
          <div>
            <label htmlFor="youtube" className="block text-sm font-medium text-gray-700 mb-1">
              YouTube
            </label>
            <input
              type="text"
              id="youtube"
              name="youtube"
              value={formData.socialMediaLinks?.youtube || ''}
              onChange={handleSocialMediaChange}
              className="w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-blue-500 focus:border-blue-500"
              placeholder="https://youtube.com/channel/xyz"
            />
          </div>
          
          {/* TikTok */}
          <div>
            <label htmlFor="tiktok" className="block text-sm font-medium text-gray-700 mb-1">
              TikTok
            </label>
            <input
              type="text"
              id="tiktok"
              name="tiktok"
              value={formData.socialMediaLinks?.tiktok || ''}
              onChange={handleSocialMediaChange}
              className="w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-blue-500 focus:border-blue-500"
              placeholder="https://tiktok.com/@username"
            />
          </div>
          
          {/* Facebook */}
          <div>
            <label htmlFor="facebook" className="block text-sm font-medium text-gray-700 mb-1">
              Facebook
            </label>
            <input
              type="text"
              id="facebook"
              name="facebook"
              value={formData.socialMediaLinks?.facebook || ''}
              onChange={handleSocialMediaChange}
              className="w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-blue-500 focus:border-blue-500"
              placeholder="https://facebook.com/username"
            />
          </div>
          
          {/* ウェブサイト */}
          <div>
            <label htmlFor="website" className="block text-sm font-medium text-gray-700 mb-1">
              ウェブサイト
            </label>
            <input
              type="text"
              id="website"
              name="website"
              value={formData.socialMediaLinks?.website || ''}
              onChange={handleSocialMediaChange}
              className="w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-blue-500 focus:border-blue-500"
              placeholder="https://yourwebsite.com"
            />
          </div>
          
          {/* ブログ */}
          <div>
            <label htmlFor="blog" className="block text-sm font-medium text-gray-700 mb-1">
              ブログ
            </label>
            <input
              type="text"
              id="blog"
              name="blog"
              value={formData.socialMediaLinks?.blog || ''}
              onChange={handleSocialMediaChange}
              className="w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-blue-500 focus:border-blue-500"
              placeholder="https://yourblog.com"
            />
          </div>
        </div>
      </div>
